#!/usr/bin/env python
# -*- coding: utf-8 -*-

##################
#
# Simple Login and Push to Wechat Mini-program
# Created by Song in Wiredcraft
#
##################
#
# ChangeLog
# 20180928 Song Initial Creation
#
##################
#
# Usage:
#   export SLACK_BOT_TOKEN=""
#   export SLACK_CHANNELS=cicd
#   python login_push.py version project_root description
#
##################

import base64
import os
import re
import requests
import subprocess
import sys


SLACK_BOT_TOKEN = os.environ.get("SLACK_BOT_TOKEN", "")
SLACK_CHANNELS = os.environ.get("SLACK_CHANNELS", "")

RETRY_LOGIN = os.environ.get("RETRY_LOGIN", "3")
RETRY_PUSH = os.environ.get("RETRY_PUSH", "3")

# Document: https://api.slack.com/methods/files.upload
SLACK_UPLOAD_URL = "https://slack.com/api/files.upload"
CMD_CLI = "/Applications/wechatwebdevtools.app/Contents/Resources/app.nw/bin/cli"


def decode_image(base64_text, output_file=None):
    """
    This function accept base64 text formatted image
    and returns the binary version.

    :param base64_text: image formatted as base64 coding.
    :param output_file: if it specified, the image will be written to file
    :return: binary image
    """
    img_data = base64.b64decode(re.sub('^data:image/.+;base64,', '', base64_text))
    if output_file:
        with open(output_file, "wb") as file:
            file.write(img_data)
    return img_data


def execute(cmd):
    """
    This function accept the command line, run it, and
    yield the standard output one line at a time generated
    by the command. It will wait the stdout until the
    next line is ready.

    :param cmd: The command line as strings in a list
    :return:
    """
    popen = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
    for stdout_line in iter(popen.stdout.readline, ""):
        yield stdout_line

    popen.stdout.close()
    return_code = popen.wait()
    if return_code:
        raise subprocess.CalledProcessError(return_code, cmd)


def login(retry=3):
    """
    This function will try to login using wechat developer tool.
    It retrieves the qrcode generated by the cli tool, then send it
    to Slack, then an user can scan the qrcode, the cli tool then
    returns the result, if failed, login will retry.

    :param retry: The number of times the script will retry if
    login failed the first time

    :return: True if login succeeded, else False
    """
    for line in execute([
        CMD_CLI,
        "-l",
        "--login-qr-output base64"]
    ):
        if line.startswith("data:image/jpeg;base64"):
            image = decode_image(line)
            result = requests.post(
                SLACK_UPLOAD_URL,
                files={'file': image},
                data={
                    "token": SLACK_BOT_TOKEN,
                    "channels": SLACK_CHANNELS,
                }
            )
            if result.status_code != 200:
                print("Failed to upload the qrcode to slack!")
        elif line.startswith("login success"):
            print("Success")
            return True
        else:
            print(line)

    if retry > 0:
        print("Error: Login Failed. Retrying...")
        return login(retry=retry-1)
    else:
        print("Error: Login Failed.")

    return False


def push(version, project_root, description, retry=3):
    """
    The script overall tries to push the source code of the
    wechat miniapp to wechat server so it can be reviewed by Tencent
    and released to the public.

    If the code push failed, the most possible reason is the cli
    tool is not authenticated with a wechat account.

    The script then login and push again.

    :param version: Source code version
    :param project_root: Miniapp root folder location
    :param description: The description of this push
    :param retry: The number of times to re-push if it failed
    the first time.
    :return:
    """
    for line in execute([
        CMD_CLI,
        "--upload",
        "{version}@{project_root}".format(version=version, project_root=project_root),
        "--upload-desc",
        "{description}".format(description=description)
    ]):
        if line.startswith("upload success"):
            print("Push Succeeded!")
            return True

        # Looking for line:
        # error: '{"code":40000,"error":"错误 需要重新登录"}',
        if line.strip().startswith("error:") and '"code":40000' in line:
            login(retry=int(RETRY_LOGIN))
            if retry > 0:
                push(
                    version=version,
                    project_root=project_root,
                    description=description,
                    retry=retry-1,
                )


def main():
    version, project_root, description = sys.argv[1:]

    push(
        version,
        project_root,
        description,
        retry=int(RETRY_PUSH)
    )


if __name__ == "__main__":
    main()
